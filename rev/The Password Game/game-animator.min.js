const elem = document.getElementById('animations');
let styleChanges = '';
const append = (update) => styleChanges += update;
const updateStyle = (append=false) => {
    if (append) {
        elem.style.cssText += styleChanges;
    } else {
        elem.style.cssText = styleChanges;
    }
    styleChanges = '';
};
const A = (get, set, c={}) => new Proxy(c, { get, set });
const style = getComputedStyle(elem);
const B = A(
    (a, b, c) => style.getPropertyValue(`--${b}`) >> 0,
    (a, b, c) => append(`--${b}:var(--${1*!!c});--${b}n:var(--${1*!c});`),
);
const F = new Array(8).fill('r').map((a, b) => a + (b + 1)).map(a => [a.toUpperCase(), a]);
const R = A(
    (a, b, c) => a.reduce((d, e, f) => d + (B[b + f] << f), 0),
    (a, b, c) => a.filter((d, e, f) => B[b + e] = c & (1 << e)),
    F.flat(),
);
F.forEach(r => R[r[1]] = 0);
const M = A(
    (a, b, c) => a[b] ?? a.getUint16(b * 2),
    (a, b, c) => a.setUint16(b * 2, c),
    new DataView(new WebAssembly.Memory({ initial: 2 }).buffer),
);
const P = A(
    (a, b, c) => a.getUint16(b * 2),
    (a, b, c) => a.setUint16(b * 2, c),
    new DataView(M.buffer, 0x2000),
);
const L = () => {
    for (const [k, v] of F)
        for (let i = 0; i < 16; i++)
            B[`${v}${i}`] = B[`${k}${i}`];
    R.op = M[R.R8];
    updateStyle();
};
function animateFrame() {
    if (B.lf) {
        R.ld = M[R.la];
        updateStyle(true);
    }
    window.animationHook?.();
    if (B.sf) M[R.sa] = R.sd;
    L();
}
function resetAnimation() {
    F.forEach(r => R[r[1]] = 0);
}
function runAnimation() {
    animateFrame();
    if (window.abortAnimation) return;
    if (B.ha) {
        window.onAnimationDone?.();
        return;
    }
    requestAnimationFrame(runAnimation);
}
const interpolationPoints = [25611,9382,26624,10497,34944,32897,25664,9344,43136,25600,9380,50435,31755,16288,58240,25600,9347,26624,10497,30731,15127,65280,25664,9344,10369,11556,51595,45312,29696,14000,6765,55300,13961,6781,55297,49157,10497,49268,31755,16288,58240,25600,9351,26624,10498,30731,15127,65280,25664,9344,10369,11556,51595,45312,29697,13953,6765,55300,13977,6781,55297,49157,10497,49268,31755,16288,58240,25600,9359,26624,10500,30731,15127,65280,25664,9344,10369,11556,51612,45312,29696,13984,6757,55317,13967,6757,55319,13962,6757,55311,13959,6757,55313,13978,6757,55305,13958,6757,55307,13978,6757,55299,13956,6757,55301,10497,49251,31755,16288,58240,25600,9375,26624,10504,30731,15127,65280,25664,9344,10369,11556,31744,16256,51596,45312,29696,14000,6765,55301,13961,6781,55298,12880,8068,10497,49267,16375,56323,31755,16288,58240,25600,9407,26624,10512,30731,15127,65280,25664,9345,43171,27649,11709,51587,31755,16288,58240,25601,9407,26624,10528,30731,15127,65280,25664,9345,43136,27649,11686,51585,49171,43137,27649,11692,51585,49166,43138,27649,11681,51585,49161,43139,27649,11687,51585,49156,43140,27649,11707,51587,31755,16288,58240,25603,9407,26625,10496,30731,15127,65280,25664,9344,10369,11556,51598,45312,29696,13984,6757,55302,29697,14014,6781,55298,10497,49268,31755,16288,58240,25607,9407,26626,10496,30731,15127,65280,27712,11648,10625,11555,31748,16287,51604,45312,30724,15109,56203,42752,1545,1272,50181,46337,4645,42753,50691,49156,15106,49268,10497,49262,31755,16288,58240,25615,9407,26628,10496,30731,15127,65280,49178,123,15,49,66,115,44,117,25,121,38,48,66,101,58,66,58,120,28,100,51,87,111,56,115,75,54,26688,10497,42246,43271,30726,15107,65280,26629,10557,43264,55555,31755,16288,58240,26688,10497,42250,43275,30726,15107,65280,26629,10557,43265,55555,31755,16288,58240,26688,10497,42254,43279,30726,15107,65280,26629,10557,43266,55555,31755,16288,58240,26688,10497,42259,43284,30726,15107,65280,26629,10557,43267,55555,31755,16288,58240,26688,10497,42253,43281,30726,15107,65280,26629,10557,43268,55555,31755,16288,58240,26688,10497,42268,43293,30726,15107,65280,26629,10557,43269,55555,31755,16288,58240,25631,9407,26632,10496,30731,15127,65280,31754,16273,58240,47614,57929,23814,43487,13868,2303,6184,3200,4927,6967,4643,29702,13969,4740,45568,6948,52482,3328,49269,58240,0,4129,8258,12387,16516,20645,24774,28903,33032,37161,41290,45419,49548,53677,57806,61935,4657,528,12915,8786,21173,17044,29431,25302,37689,33560,45947,41818,54205,50076,62463,58334,9314,13379,1056,5121,25830,29895,17572,21637,42346,46411,34088,38153,58862,62927,50604,54669,13907,9842,5649,1584,30423,26358,22165,18100,46939,42874,38681,34616,63455,59390,55197,51132,18628,22757,26758,30887,2112,6241,10242,14371,51660,55789,59790,63919,35144,39273,43274,47403,23285,19156,31415,27286,6769,2640,14899,10770,56317,52188,64447,60318,39801,35672,47931,43802,27814,31879,19684,23749,11298,15363,3168,7233,60846,64911,52716,56781,44330,48395,36200,40265,32407,28342,24277,20212,15891,11826,7761,3696,65439,61374,57309,53244,48923,44858,40793,36728,37256,33193,45514,41451,53516,49453,61774,57711,4224,161,12482,8419,20484,16421,28742,24679,33721,37784,41979,46042,49981,54044,58239,62302,689,4752,8947,13010,16949,21012,25207,29270,46570,42443,38312,34185,62830,58703,54572,50445,13538,9411,5280,1153,29798,25671,21540,17413,42971,47098,34713,38840,59231,63358,50973,55100,9939,14066,1681,5808,26199,30326,17941,22068,55628,51565,63758,59695,39368,35305,47498,43435,22596,18533,30726,26663,6336,2273,14466,10403,52093,56156,60223,64286,35833,39896,43963,48026,19061,23124,27191,31254,2801,6864,10931,14994,64814,60687,56684,52557,48554,44427,40424,36297,31782,27655,23652,19525,15522,11395,7392,3265,61215,65342,53085,57212,44955,49082,36825,40952,28183,32310,20053,24180,11923,16050,3793,7920,25664,9367,26688,10524,28558,11648,36096,28673,12800,29716,13952,44160,3492,3485,35968,44161,3492,29732,13952,3485,35969,44162,3492,29762,13952,3485,35970,44163,3492,29780,13952,3485,35971,44164,3492,29716,13952,3485,35972,6272,25604,9379,26901,10535,28198,11691,29495,12847,29819,13980,65280,29568,12800,1164,29772,14007,50819,31755,16288,58240,25631,9407,26640,10496,30731,15127,65280,31755,16288,58240,27659,11686,45440,4633,37248,45441,4634,37249,58240,25611,9382,47232,9345,48256,57386,1,0];
interpolationPoints.forEach((v, i) => M[i] = v);
